@{
    ViewData["Title"] = "Live Premises Status";
}

<h2 class="text-center my-3">Live Premises Status</h2>

<div class="container">
    <form class="mb-4 row g-2 align-items-end">
        <div class="col-md-4">
            <label for="locationDropdown" class="form-label">Select Location:</label>
            <select id="locationDropdown" class="form-select" required>
                <option disabled selected value="">-- Select a location --</option>
                @foreach (var item in ViewBag.Locations as SelectList)
                {
                    <option value="@item.Value">@item.Text</option>
                }
            </select>
        </div>

        <div class="col-md-4">
            <div class="form-check mt-4">
                <input class="form-check-input" type="checkbox" id="showAllToggle">
                <label class="form-check-label" for="showAllToggle">
                    Show All Entries
                </label>
            </div>
        </div>

        <div class="col-md-4 d-flex justify-content-end gap-2">
            <button id="downloadCsvBtn" class="btn btn-success" type="button">Export CSV</button>
            <button id="downloadPdfBtn" class="btn btn-danger" type="button">Export PDF</button>
        </div>
    </form>

    <div class="row">
        <div class="col-md-6 mb-4">
            <canvas id="pieChart" width="300" height="300"></canvas>
        </div>

        <div class="col-md-6">
            <h5>Details of People</h5>
            <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                <table class="table table-bordered table-striped" id="detailsTable">
                    <thead class="table-dark">
                        <tr>
                            <th>Name</th>
                            <th>Flag</th>
                            <th>Designation</th>
                            <th>Remarks</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Filled dynamically -->
                    </tbody>
                </table>
            </div>
            <div class="mt-2 text-end">
                <button class="btn btn-secondary btn-sm" onclick="resetTableFilter()">Reset Filter</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        const dropdown = document.getElementById("locationDropdown");
        const showAllToggle = document.getElementById("showAllToggle");
        const ctx = document.getElementById("pieChart").getContext("2d");
        const csvBtn = document.getElementById("downloadCsvBtn");
        const pdfBtn = document.getElementById("downloadPdfBtn");
        let chart;

        function updateData() {
            const locationId = dropdown.value;
            const showAll = showAllToggle.checked;

            if (!locationId) return;

            fetch(`/Access/GetLiveData?locationId=${locationId}&showAll=${showAll}`)
                .then(response => response.json())
                .then(result => {
                    const chartData = result.chartData || [];
                    const tableData = result.tableData || [];

                    if (chart) chart.destroy();

                    chart = new Chart(ctx, {
                        type: 'pie',
                        data: {
                            labels: chartData.map(d => d.flag),
                            datasets: [{
                                label: 'People Present',
                                data: chartData.map(d => d.count),
                                backgroundColor: [
                                    '#dc3545', // red
                                    '#0d6efd', // blue
                                    '#198754', // green
                                    '#ffc107', // yellow
                                    '#6f42c1'  // purple
                                ],
                                hoverOffset: 10
                            }]
                        },
                        options: {
                            responsive: true,
                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        usePointStyle: true,
                                        padding: 20
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: ctx => `${ctx.label}: ${ctx.raw} person(s)`
                                    }
                                }
                            },
                            onClick: (_, elements) => {
                                if (elements.length > 0) {
                                    const index = elements[0].index;
                                    const selectedFlag = chart.data.labels[index];

                                    document.querySelectorAll("#detailsTable tbody tr").forEach(row => {
                                        const flag = row.children[1].textContent;
                                        row.style.display = flag === selectedFlag ? "" : "none";
                                    });
                                }
                            }
                        }
                    });

                    // Update table
                    const tbody = document.querySelector("#detailsTable tbody");
                    tbody.innerHTML = "";

                    tableData.forEach(item => {
                        tbody.innerHTML += `
                            <tr>
                                <td>${item.name}</td>
                                <td>${item.flag}</td>
                                <td>${item.designation}</td>
                                <td>${item.remarks}</td>
                            </tr>`;
                    });
                });
        }

        function resetTableFilter() {
            document.querySelectorAll("#detailsTable tbody tr").forEach(row => {
                row.style.display = "";
            });
        }

        dropdown.addEventListener("change", updateData);
        showAllToggle.addEventListener("change", updateData);
        document.addEventListener("DOMContentLoaded", () => {
            if (dropdown.value) updateData();
        });

        csvBtn.addEventListener("click", () => {
            const locationId = dropdown.value;
            if (locationId) window.location.href = `/Access/ExportCsv?locationId=${locationId}`;
        });

        pdfBtn.addEventListener("click", () => {
            const locationId = dropdown.value;
            if (locationId) window.location.href = `/Access/ExportPdf?locationId=${locationId}`;
        });
    </script>
}
